"use strict";(self.webpackChunk_cfinnestad_react_form_builder=self.webpackChunk_cfinnestad_react_form_builder||[]).push([[925],{"./src/components/Items/Subtypes/Autocomplete/Autocomplete.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllowAnyInput:()=>AllowAnyInput,Basic:()=>Basic,Required:()=>Required,WithStaticOptions:()=>WithStaticOptions,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _Render_Render__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/Render/Render.tsx"),_Render_StoriesSubmit__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Render/StoriesSubmit.tsx"),_faker_js_faker__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@faker-js/faker/dist/esm/index.mjs");_faker_js_faker__WEBPACK_IMPORTED_MODULE_2__.We.seed(123);const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Items/Fields/Autocomplete",component:_Render_Render__WEBPACK_IMPORTED_MODULE_0__.ZP,tags:["autodocs"],argTypes:{Items:[{type:"Field",subtype:"Autocomplete",id:"autocompleteId",name:"autocompleteName",label:"Autocomplete Label",options:[]}]}},Basic={args:{Items:[{type:"Field",subtype:"Autocomplete",id:"autocompleteBasicId",name:"autocompleteCitiesName",searchableOptionsName:"exampleCities",options:[{label:"Red",value:"red"},{label:"Blue",value:"blue"},{label:"Green",value:"green"}],label:"Example Cities",value:void 0},{type:"Submit",id:"submit1",label:"Submit",submitElementName:"default"}],Options:{searchableOptions:{exampleCities:input=>null!=input?exampleCities.filter((city=>city.value?.toLowerCase().includes(input))):[]},submitElements:{default:_Render_StoriesSubmit__WEBPACK_IMPORTED_MODULE_1__.k}}}},AllowAnyInput={args:{...Basic.args,Items:[{type:"Field",subtype:"Autocomplete",id:"autocompleteAnyInput",name:"autocompleteTestName",searchableOptionsName:"exampleCities",allowAnyInput:!0,label:"Service City",value:"Testing"},{...Basic.args.Items[1]}]}},Required={args:{...Basic.args,Items:[{type:"Field",subtype:"Autocomplete",id:"autocompleteRequiredId",name:"autocompleteTestName",searchableOptionsName:"exampleCities",label:"Example Cities - Required",required:!0,value:void 0},{...Basic.args.Items[1]}]}},WithStaticOptions={args:{...Basic.args,Items:[{type:"Field",subtype:"Autocomplete",id:"autocompleteTestId",name:"autocompleteTestName",options:[{label:"Red",value:"red"},{label:"Green",value:"green"},{label:"Blue",value:"blue"},{label:"Purple",value:"purple"},{label:"Yellow",value:"yellow"},{label:"Pink",value:"pink"},{label:"Orange",value:"orange"},{label:"Grey",value:"grey"},{label:"Black",value:"black"}],label:"Colors",value:void 0},{...Basic.args.Items[1]}]}},exampleCities=[];for(let x=0;x<50;x++){const city=_faker_js_faker__WEBPACK_IMPORTED_MODULE_2__.We.location.city();exampleCities.push({label:city,value:city.toLowerCase()})}Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"{\n  args: {\n    Items: [({\n      type: 'Field',\n      subtype: 'Autocomplete',\n      id: 'autocompleteBasicId',\n      name: 'autocompleteCitiesName',\n      searchableOptionsName: 'exampleCities',\n      // Defaults to use searchableOptionsName\n      options: [{\n        label: 'Red',\n        value: 'red'\n      }, {\n        label: 'Blue',\n        value: 'blue'\n      }, {\n        label: 'Green',\n        value: 'green'\n      }],\n      label: 'Example Cities',\n      value: undefined\n    } as AutocompleteSubtype), ({\n      type: 'Submit',\n      id: 'submit1',\n      label: 'Submit',\n      submitElementName: 'default'\n    } as SubmitItem)],\n    Options: ({\n      searchableOptions: {\n        exampleCities: input => input != null ? exampleCities.filter(city => city.value?.toLowerCase().includes(input)) : []\n      },\n      submitElements: {\n        'default': Submit\n      }\n    } as RenderOptions)\n  }\n}",...Basic.parameters?.docs?.source}}},AllowAnyInput.parameters={...AllowAnyInput.parameters,docs:{...AllowAnyInput.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Basic.args,\n    Items: [({\n      type: 'Field',\n      subtype: 'Autocomplete',\n      id: 'autocompleteAnyInput',\n      name: 'autocompleteTestName',\n      searchableOptionsName: 'exampleCities',\n      allowAnyInput: true,\n      label: 'Service City',\n      value: 'Testing'\n    } as AutocompleteSubtype), {\n      ...Basic.args.Items[1]\n    }]\n  }\n}",...AllowAnyInput.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Basic.args,\n    Items: [({\n      type: 'Field',\n      subtype: 'Autocomplete',\n      id: 'autocompleteRequiredId',\n      name: 'autocompleteTestName',\n      searchableOptionsName: 'exampleCities',\n      label: 'Example Cities - Required',\n      required: true,\n      value: undefined\n    } as AutocompleteSubtype), {\n      ...Basic.args.Items[1]\n    }]\n  }\n}",...Required.parameters?.docs?.source}}},WithStaticOptions.parameters={...WithStaticOptions.parameters,docs:{...WithStaticOptions.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Basic.args,\n    Items: [({\n      type: 'Field',\n      subtype: 'Autocomplete',\n      id: 'autocompleteTestId',\n      name: 'autocompleteTestName',\n      options: [{\n        label: 'Red',\n        value: 'red'\n      }, {\n        label: 'Green',\n        value: 'green'\n      }, {\n        label: 'Blue',\n        value: 'blue'\n      }, {\n        label: 'Purple',\n        value: 'purple'\n      }, {\n        label: 'Yellow',\n        value: 'yellow'\n      }, {\n        label: 'Pink',\n        value: 'pink'\n      }, {\n        label: 'Orange',\n        value: 'orange'\n      }, {\n        label: 'Grey',\n        value: 'grey'\n      }, {\n        label: 'Black',\n        value: 'black'\n      }],\n      label: 'Colors',\n      value: undefined\n    } as AutocompleteSubtype), {\n      ...Basic.args.Items[1]\n    }]\n  }\n}",...WithStaticOptions.parameters?.docs?.source}}};const __namedExportsOrder=["Basic","AllowAnyInput","Required","WithStaticOptions"]}}]);